# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types:
      - published

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  DOTNET_CLI_TELEMETRY_OPTOUT: true

# Kill other jobs when we trigger this workflow by sending new commits
# to the PR.
# https://stackoverflow.com/a/72408109
concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  compile_parsers:
    strategy:
      matrix:
        language: [csharp]
          
        #[csharp, java, javascript, python, ruby, php]

    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Install Kaitai
        run: |
          curl -LO https://github.com/kaitai-io/kaitai_struct_compiler/releases/download/0.10/kaitai-struct-compiler_0.10_all.deb
          sudo apt-get install ./kaitai-struct-compiler_0.10_all.deb
          
      - name: Compile definitions
        run: kaitai-struct-compiler -t ${{ matrix.language }} --outdir build $GITHUB_WORKSPACE/definitions/aoe2record.ksy

      - name: Store Compiled Parser
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.language }}
          if-no-files-found: ignore
          path: |
            build
  
  build_csharp:
    runs-on: ubuntu-latest
    needs: [compile_parsers]

    steps:
        - uses: actions/checkout@v4
        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: 8.0.x
        - uses: actions/download-artifact@v4
          with:
            name: csharp
            path: $GITHUB_WORKSPACE/platform/csharp
        - uses: actions/cache@v3
          with:
            path: ~/.nuget/packages
            # Look to see if there is a cache hit for the corresponding requirements file
            key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
            restore-keys: |
                ${{ runner.os }}-nuget
        - name: Restore dependencies
          run: dotnet restore $GITHUB_WORKSPACE/platform/csharp
        - name: Build
          run: dotnet build --configuration Release --no-restore $GITHUB_WORKSPACE/platform/csharp
        - name: Pack
          run: |
            latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.1)
            runId=$GITHUB_RUN_ID
            packageVersion="${latestTag//v}-build.${runId}"
            dotnet pack --configuration Release --no-restore --include-symbols --include-source -p:PackageVersion=$packageVersion $GITHUB_WORKSPACE/platform/csharp
        - name: Store nupkg
          uses: actions/upload-artifact@v4
          with:
            name: nupkg-csharp
            if-no-files-found: ignore
            path: |
                platform/csharp/bin/Release/*.nupkg

  prerelease_csharp:
    needs: build_csharp
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
        - uses: actions/download-artifact@v4      
          with:
            name: nupkg-csharp
        - name: Publish to github-feed
          run: dotnet nuget push "*.nupkg"  --api-key ${{secrets.gh_nuget_api_key}} --source "github"

  release_csharp:
    needs: build_csharp
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
        - uses: actions/download-artifact@v4      
          with:
            name: nupkg-csharp
        - name: Publish to github-feed
          run: dotnet nuget push "*.nupkg"  --api-key ${{secrets.gh_nuget_api_key}} --source "github"
        - name: Publish nuget
          run: dotnet nuget push "*.nupkg" --api-key ${{secrets.nuget_api_key}} --source https://api.nuget.org/v3/index.json
        
        

